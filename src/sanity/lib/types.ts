/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Event = {
  _id: string
  _type: 'event'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  eventType?:
    | 'Concert'
    | 'Festival'
    | 'Comedy'
    | 'Theatre'
    | 'Virtual'
    | 'in-person'
  date?: string
  doorsOpen?: number
  venue?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'venue'
  }
  headline?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'artist'
  }
  details?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  tickets?: string
}

export type Artist = {
  _id: string
  _type: 'artist'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
}

export type Venue = {
  _id: string
  _type: 'venue'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
}

export type PortableTextSimple = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<
    | ({
        _key: string
      } & LinkProduct)
    | ({
        _key: string
      } & LinkEmail)
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
  level?: number
  _type: 'block'
  _key: string
}>

export type PortableText = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<
        | ({
            _key: string
          } & LinkProduct)
        | ({
            _key: string
          } & LinkEmail)
        | ({
            _key: string
          } & LinkInternal)
        | ({
            _key: string
          } & LinkExternal)
      >
      level?: number
      _type: 'block'
      _key: string
    }
  | ({
      _key: string
    } & Accordion)
  | ({
      _key: string
    } & Callout)
  | ({
      _key: string
    } & Grid)
  | ({
      _key: string
    } & Images)
  | ({
      _key: string
    } & ImageWithProductHotspots)
  | ({
      _key: string
    } & Instagram)
  | ({
      _key: string
    } & Products)
>

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menu?: Menu
  footer?: FooterSettings
  customProductOptions?: Array<
    | ({
        _key: string
      } & CustomProductOptionColor)
    | ({
        _key: string
      } & CustomProductOptionSize)
  >
  notFoundPage?: NotFoundPage
  seo?: Seo
}

export type Spot = {
  _type: 'spot'
  productWithVariant?: ProductWithVariant
  x?: number
  y?: number
}

export type ProxyString = string

export type ProductVariant = {
  _id: string
  _type: 'productVariant'
  _createdAt: string
  _updatedAt: string
  _rev: string
  hidden?: string
  titleProxy?: ProxyString
  store?: ShopifyProductVariant
}

export type ShopifyProductVariant = {
  _type: 'shopifyProductVariant'
  createdAt?: string
  updatedAt?: string
  status?: 'active' | 'archived' | 'draft'
  isDeleted?: boolean
  title?: string
  sku?: string
  id?: number
  gid?: string
  productId?: number
  productGid?: string
  price?: number
  compareAtPrice?: number
  inventory?: Inventory
  option1?: string
  option2?: string
  option3?: string
  previewImageUrl?: string
}

export type ProductReference = {
  _type: 'productReference'
  productWithVariant?: ProductWithVariant
}

export type ProductHotspots = Array<
  {
    _key: string
  } & Spot
>

export type Products = {
  _type: 'products'
  products?: Array<
    {
      _key: string
    } & ProductReference
  >
  layout?: 'card' | 'pill'
}

export type PriceRange = {
  _type: 'priceRange'
  minVariantPrice?: number
  maxVariantPrice?: number
}

export type PlaceholderString = string

export type Option = {
  _type: 'option'
  name?: string
  values?: Array<string>
}

export type NotFoundPage = {
  _type: 'notFoundPage'
  title?: string
  body?: string
  collection?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'collection'
  }
  colorTheme?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'colorTheme'
  }
}

export type Menu = {
  _type: 'menu'
  links?: Array<
    | ({
        _key: string
      } & CollectionGroup)
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
}

export type MenuLinks = Array<
  | ({
      _key: string
    } & CollectionGroup)
  | ({
      _key: string
    } & LinkInternal)
  | ({
      _key: string
    } & LinkExternal)
>

export type Inventory = {
  _type: 'inventory'
  isAvailable?: boolean
  management?: string
  policy?: string
}

export type Instagram = {
  _type: 'instagram'
  url?: string
}

export type ImageWithProductHotspots = {
  _type: 'imageWithProductHotspots'
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  showHotspots?: boolean
  productHotspots?: ProductHotspots
}

export type ImageFeature = {
  _type: 'imageFeature'
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  variant?:
    | string
    | 'caption'
    | 'callToAction'
    | 'productHotspots'
    | 'productTags'
  caption?: string
  callToAction?: ImageCallToAction
  productHotspots?: ProductHotspots
  productTags?: Array<
    {
      _key: string
    } & ProductWithVariant
  >
}

export type Images = {
  _type: 'images'
  imageFeatures?: Array<
    {
      _key: string
    } & ImageFeature
  >
  fullWidth?: boolean
  verticalAlign?: 'top' | 'center' | 'bottom'
}

export type ImageCallToAction = {
  _type: 'imageCallToAction'
  title?: string
  link?: Array<
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
}

export type Grid = {
  _type: 'grid'
  items?: Array<
    {
      _key: string
    } & GridItem
  >
}

export type GridItem = {
  _type: 'gridItem'
  title?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  body?: PortableTextSimple
}

export type FooterSettings = {
  _type: 'footerSettings'
  links?: Array<
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
  text?: PortableTextSimple
}

export type CustomProductOptionSize = {
  _type: 'customProductOption.size'
  title?: string
  sizes?: Array<
    {
      _key: string
    } & CustomProductOptionSizeObject
  >
}

export type CustomProductOptionSizeObject = {
  _type: 'customProductOption.sizeObject'
  title?: string
  width?: number
  height?: number
}

export type CustomProductOptionColor = {
  _type: 'customProductOption.color'
  title?: string
  colors?: Array<
    {
      _key: string
    } & CustomProductOptionColorObject
  >
}

export type CustomProductOptionColorObject = {
  _type: 'customProductOption.colorObject'
  title?: string
  color?: Color
}

export type CollectionRule = {
  _type: 'collectionRule'
  column?: string
  relation?: string
  condition?: string
}

export type CollectionReference = {
  _type: 'collectionReference'
  collection?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'collection'
  }
  showBackground?: boolean
}

export type CollectionLinks = Array<{
  _ref: string
  _type: 'reference'
  _weak?: boolean
  _key: string
  [internalGroqTypeReferenceTo]?: 'collection'
}>

export type CollectionGroup = {
  _type: 'collectionGroup'
  title?: string
  collectionLinks?: CollectionLinks
  collectionProducts?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'collection'
  }
}

export type CallToAction = {
  _type: 'callToAction'
  layout?: 'left' | 'right'
  title?: string
  portableText?: string
  link?: Array<
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
  content?: Array<
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & ProductWithVariant)
  >
}

export type Callout = {
  _type: 'callout'
  text?: string
  link?: Array<
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
}

export type Accordion = {
  _type: 'accordion'
  groups?: Array<
    {
      _key: string
    } & AccordionGroup
  >
}

export type AccordionGroup = {
  _type: 'accordionGroup'
  title?: string
  body?: PortableTextSimple
}

export type LinkProduct = {
  _type: 'linkProduct'
  productWithVariant?: ProductWithVariant
  linkAction?: 'link' | 'addToCart' | 'buyNow'
  quantity?: number
}

export type ProductWithVariant = {
  _type: 'productWithVariant'
  product?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'product'
  }
  variant?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'productVariant'
  }
}

export type LinkInternal = {
  _type: 'linkInternal'
  reference?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'collection'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'product'
      }
}

export type Product = {
  _id: string
  _type: 'product'
  _createdAt: string
  _updatedAt: string
  _rev: string
  hidden?: string
  titleProxy?: ProxyString
  slugProxy?: ProxyString
  colorTheme?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'colorTheme'
  }
  body?: PortableText
  store?: ShopifyProduct
  seo?: Seo
}

export type ShopifyProduct = {
  _type: 'shopifyProduct'
  createdAt?: string
  updatedAt?: string
  status?: 'active' | 'archived' | 'draft'
  isDeleted?: boolean
  title?: string
  id?: number
  gid?: string
  slug?: Slug
  descriptionHtml?: string
  productType?: string
  vendor?: string
  tags?: string
  priceRange?: PriceRange
  previewImageUrl?: string
  options?: Array<
    {
      _key: string
    } & Option
  >
  variants?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'productVariant'
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  colorTheme?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'colorTheme'
  }
  showHero?: boolean
  hero?: Hero
  body?: PortableText
  seo?: Seo
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  hero?: Hero
  modules?: Array<
    | ({
        _key: string
      } & Accordion)
    | ({
        _key: string
      } & Callout)
    | ({
        _key: string
      } & Grid)
    | ({
        _key: string
      } & Images)
    | ({
        _key: string
      } & ImageWithProductHotspots)
    | ({
        _key: string
      } & Instagram)
    | ({
        _key: string
      } & Products)
  >
  seo?: Seo
}

export type Collection = {
  _id: string
  _type: 'collection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  hidden?: string
  titleProxy?: ProxyString
  slugProxy?: ProxyString
  colorTheme?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'colorTheme'
  }
  vector?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  showHero?: boolean
  hero?: Hero
  modules?: Array<
    | ({
        _key: string
      } & Callout)
    | ({
        _key: string
      } & CallToAction)
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Instagram)
  >
  store?: ShopifyCollection
  seo?: Seo
}

export type Seo = {
  _type: 'seo'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type ShopifyCollection = {
  _type: 'shopifyCollection'
  createdAt?: string
  updatedAt?: string
  isDeleted?: boolean
  title?: string
  id?: number
  gid?: string
  slug?: Slug
  descriptionHtml?: string
  imageUrl?: string
  rules?: Array<
    {
      _key: string
    } & CollectionRule
  >
  disjunctive?: boolean
  sortOrder?: string
}

export type Hero = {
  _type: 'hero'
  title?: string
  description?: string
  link?: Array<
    | ({
        _key: string
      } & LinkInternal)
    | ({
        _key: string
      } & LinkExternal)
  >
  content?: Array<
    | ({
        _key: string
      } & ProductWithVariant)
    | ({
        _key: string
      } & ImageWithProductHotspots)
  >
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type ColorTheme = {
  _id: string
  _type: 'colorTheme'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  text?: Color
  background?: Color
}

export type LinkExternal = {
  _type: 'linkExternal'
  url?: string
  newWindow?: boolean
}

export type LinkEmail = {
  _type: 'linkEmail'
  email?: string
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Event
  | Artist
  | Venue
  | PortableTextSimple
  | PortableText
  | Settings
  | Spot
  | ProxyString
  | ProductVariant
  | ShopifyProductVariant
  | ProductReference
  | ProductHotspots
  | Products
  | PriceRange
  | PlaceholderString
  | Option
  | NotFoundPage
  | Menu
  | MenuLinks
  | Inventory
  | Instagram
  | ImageWithProductHotspots
  | ImageFeature
  | Images
  | ImageCallToAction
  | Grid
  | GridItem
  | FooterSettings
  | CustomProductOptionSize
  | CustomProductOptionSizeObject
  | CustomProductOptionColor
  | CustomProductOptionColorObject
  | CollectionRule
  | CollectionReference
  | CollectionLinks
  | CollectionGroup
  | CallToAction
  | Callout
  | Accordion
  | AccordionGroup
  | LinkProduct
  | ProductWithVariant
  | LinkInternal
  | Product
  | ShopifyProduct
  | Page
  | Home
  | Collection
  | Seo
  | ShopifyCollection
  | Hero
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | ColorTheme
  | LinkExternal
  | LinkEmail
  | MediaTag
  | Slug
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../sapphire-dust-next/src/sanity/queries/home-page.ts
// Variable: HOME_PAGE_QUERY
// Query: *[  _type == "home"][0]{  ...,   "meta": {    "slug":"home",    "lang": lang  },  sections[] {    _type,    _key,      _type == "home-hero" => {    desktop_video {      "url": asset->url    },    desktop_cover {      "url": asset->url    },    mobile_video {      "url": asset->url    },    mobile_cover {      "url": asset->url    }  },      _type == "image-and-cta" => {    tag,    title,    subtitle,    layout,    body_text,    image {      "url": asset->url    },    cta {        _type == "linkGlobal" => {    linkType,    title,    description,      linkType == "internal" => {    "internalLink": linkReference->{      _type,      _type == "collection" => {        "slug": store.slug.current      },      _type == "page" => {        "slug": slug.current,        lang      }    },  },  linkType == "external" => {    "externalLink": {      "url" : linkExternal.url,      linkExternal.newWindow == true => {        "target": "_blank"      },      linkExternal.newWindow == false => {        "target": "_self"      }    }  },  linkType == "anchor" => {    "anchor": linkAnchor  },  linkType == "action" => {    "action": linkAction  }  }    },    "product":   product->{    "id": store.gid,    "title": store.title,    "priceRange": store.priceRange,    "imageUrl": store.previewImageUrl,    "options": store.options   }  }  }}
export type HOME_PAGE_QUERYResult = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  hero?: Hero
  modules?: Array<
    | ({
        _key: string
      } & Accordion)
    | ({
        _key: string
      } & Callout)
    | ({
        _key: string
      } & Grid)
    | ({
        _key: string
      } & Images)
    | ({
        _key: string
      } & ImageWithProductHotspots)
    | ({
        _key: string
      } & Instagram)
    | ({
        _key: string
      } & Products)
  >
  seo?: Seo
  meta: {
    slug: 'home'
    lang: null
  }
  sections: null
} | null

// Source: ../sapphire-dust-next/src/app/[locale]/sanity/page.tsx
// Variable: EVENTS_QUERY
// Query: *[  _type == "event"  && defined(slug.current)]{_id, name, slug, date}|order(date desc)
export type EVENTS_QUERYResult = Array<{
  _id: string
  name: string | null
  slug: Slug | null
  date: string | null
}>

// Source: ../sapphire-dust-next/src/sanity/queries/objects/productCardObject.ts
// Variable: productCardObject
// Query: product->{    "id": store.gid,    "title": store.title,    "priceRange": store.priceRange,    "imageUrl": store.previewImageUrl,    "options": store.options   }
export type ProductCardObjectResult = never

// Source: ../sapphire-dust-next/src/app/[locale]/sanity/events/[slug]/page.tsx
// Variable: EVENT_QUERY
// Query: *[    _type == "event" &&    slug.current == $slug  ][0]{  ...,  "date": coalesce(date, now()),  "doorsOpen": coalesce(doorsOpen, 0),  headline->,  venue->}
export type EVENT_QUERYResult = {
  _id: string
  _type: 'event'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  eventType?:
    | 'Comedy'
    | 'Concert'
    | 'Festival'
    | 'in-person'
    | 'Theatre'
    | 'Virtual'
  date: string
  doorsOpen: number | 0
  venue: {
    _id: string
    _type: 'venue'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: string
  } | null
  headline: {
    _id: string
    _type: 'artist'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: string
  } | null
  details?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  tickets?: string
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[\n  _type == "home"\n][0]{\n  ...,\n   "meta": {\n    "slug":"home",\n    "lang": lang\n  },\n  sections[] {\n    _type,\n    _key,\n    \n  _type == "home-hero" => {\n    desktop_video {\n      "url": asset->url\n    },\n    desktop_cover {\n      "url": asset->url\n    },\n    mobile_video {\n      "url": asset->url\n    },\n    mobile_cover {\n      "url": asset->url\n    }\n  }\n,\n    \n  _type == "image-and-cta" => {\n    tag,\n    title,\n    subtitle,\n    layout,\n    body_text,\n    image {\n      "url": asset->url\n    },\n    cta {\n      \n  _type == "linkGlobal" => {\n    linkType,\n    title,\n    description,\n    \n  linkType == "internal" => {\n    "internalLink": linkReference->{\n      _type,\n      _type == "collection" => {\n        "slug": store.slug.current\n      },\n      _type == "page" => {\n        "slug": slug.current,\n        lang\n      }\n    },\n  },\n  linkType == "external" => {\n    "externalLink": {\n      "url" : linkExternal.url,\n      linkExternal.newWindow == true => {\n        "target": "_blank"\n      },\n      linkExternal.newWindow == false => {\n        "target": "_self"\n      }\n    }\n  },\n  linkType == "anchor" => {\n    "anchor": linkAnchor\n  },\n  linkType == "action" => {\n    "action": linkAction\n  }\n\n  }\n\n    },\n    "product": \n  product->{\n    "id": store.gid,\n    "title": store.title,\n    "priceRange": store.priceRange,\n    "imageUrl": store.previewImageUrl,\n    "options": store.options \n  }\n\n  }\n\n  }\n}\n': HOME_PAGE_QUERYResult
    '*[\n  _type == "event"\n  && defined(slug.current)\n]{_id, name, slug, date}|order(date desc)': EVENTS_QUERYResult
    '\n  product->{\n    "id": store.gid,\n    "title": store.title,\n    "priceRange": store.priceRange,\n    "imageUrl": store.previewImageUrl,\n    "options": store.options \n  }\n': ProductCardObjectResult
    '*[\n    _type == "event" &&\n    slug.current == $slug\n  ][0]{\n  ...,\n  "date": coalesce(date, now()),\n  "doorsOpen": coalesce(doorsOpen, 0),\n  headline->,\n  venue->\n}': EVENT_QUERYResult
  }
}
